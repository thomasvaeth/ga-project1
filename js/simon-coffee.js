// Generated by CoffeeScript 1.10.0
(function() {
  var blueSound, colorArr, count, gamePower, greenSound, idx, lightAndSound, nextColor, playerArr, playerGuess, playerTurn, randomColor, redSound, score, simonArr, soundsArr, speed, startItUp, startSequence, wrongSound, yellowSound;

  colorArr = ['green', 'red', 'yellow', 'blue'];

  playerTurn = false;

  simonArr = [];

  playerArr = [];

  randomColor = 0;

  playerGuess = '';

  idx = 0;

  count = 0;

  gamePower = true;

  startSequence = ['green', 'red', 'blue', 'green', 'yellow', 'red', 'blue', 'green', 'yellow', 'red', 'green', 'red', 'green', 'yellow', 'blue', 'red', 'green', 'blue', 'red', 'yellow', 'green', 'red', 'blue', 'yellow'];

  greenSound = new Audio('https://s3.amazonaws.com/freecodecamp/simonSound4.mp3');

  redSound = new Audio('https://s3.amazonaws.com/freecodecamp/simonSound3.mp3');

  yellowSound = new Audio('https://s3.amazonaws.com/freecodecamp/simonSound2.mp3');

  blueSound = new Audio('https://s3.amazonaws.com/freecodecamp/simonSound1.mp3');

  soundsArr = [greenSound, redSound, yellowSound, blueSound];

  wrongSound = new Audio('https://www.freesound.org/data/previews/142/142608_1840739-lq.mp3');

  startItUp = function(sequence) {
    setTimeout(function() {
      var i, j, ref, results;
      results = [];
      for (i = j = 0, ref = sequence.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        results.push((function(order) {
          return setTimeout(function() {
            $('.' + sequence[order]).addClass(sequence[order] + '-glow');
            return setTimeout(function() {
              return $('.' + sequence[order]).removeClass(sequence[order] + '-glow');
            }, 200);
          }, order * 250);
        })(i));
      }
      return results;
    }, 100);
    return setTimeout(function() {
      nextColor();
      return lightAndSound(simonArr);
    }, 7100);
  };

  nextColor = function() {
    randomColor = colorArr[Math.floor(Math.random() * 4)];
    simonArr.push(randomColor);
    return simonArr;
  };

  lightAndSound = function(simon) {
    setTimeout(function() {
      var i, j, ref, results;
      results = [];
      for (i = j = 0, ref = simon.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        results.push((function(order) {
          return setTimeout(function() {
            var soundIdx;
            soundIdx = colorArr.indexOf(simon[order]);
            soundsArr[soundIdx].play();
            $('.' + simon[order]).addClass(simon[order] + '-glow');
            return setTimeout(function() {
              return $('.' + simon[order]).removeClass(simon[order] + '-glow');
            }, speed());
          }, order * (speed() + 50));
        })(i));
      }
      return results;
    }, 850);
    return playerTurn = true;
  };

  speed = function() {
    if (count < 5) {
      return 700;
    } else if (count < 13) {
      return 650;
    } else {
      return 600;
    }
  };

  score = function() {
    count++;
    if (count < 10) {
      return $('.count').html('0' + count);
    } else {
      return $('.count').html(count);
    }
  };

  $(document).ready(function() {
    $('.game-container').on('click', '.gameboard', function(e) {
      var soundIdx;
      e.stopPropagation();
      if (playerTurn === true) {
        playerGuess = $(this)[0].id;
        playerArr.push(playerGuess);
        if (simonArr[idx] === playerArr[idx]) {
          soundIdx = colorArr.indexOf(playerGuess);
          soundsArr[soundIdx].play();
          if (idx === simonArr.length - 1) {
            score();
            playerTurn = false;
            playerArr = [];
            idx = 0;
            nextColor();
            return lightAndSound(simonArr);
          } else {
            return idx++;
          }
        } else {
          wrongSound.play();
          playerTurn = false;
          simonArr = [];
          playerArr = [];
          idx = 0;
          count = 0;
          $('.count').html('--');
          return setTimeout(function() {
            nextColor();
            return lightAndSound(simonArr);
          }, 3000);
        }
      }
    });
    $('.power').on('click', function() {
      if (gamePower === true) {
        gamePower = false;
        $('.gameboard').removeAttr('disabled');
        $('.arrow').hide();
        $('.count').html('--');
        return startItUp(startSequence);
      } else {
        gamePower = true;
        $('.arrow').show();
        $('.count').html('');
        playerTurn = false;
        $('.gameboard').attr('disabled', 'disabled');
        simonArr = [];
        playerArr = [];
        idx = 0;
        return count = 0;
      }
    });
    $(document).bind('touchmove', function(e) {
      return e.preventDefault();
    });
    return setTimeout(function() {
      return $('.arrow').show();
    }, 1250);
  });

}).call(this);
